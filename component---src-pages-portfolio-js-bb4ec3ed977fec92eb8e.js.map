{"version":3,"sources":["webpack:///./node_modules/semantic-ui-react/dist/es/collections/Grid/GridColumn.js","webpack:///./node_modules/semantic-ui-react/dist/es/collections/Grid/GridRow.js","webpack:///./node_modules/semantic-ui-react/dist/es/collections/Grid/Grid.js","webpack:///./src/pages/portfolio.js"],"names":["GridColumn","props","children","className","computer","color","floated","largeScreen","mobile","only","stretched","tablet","textAlign","verticalAlign","widescreen","width","classes","rest","getUnhandledProps","ElementType","getElementType","createElement","handledProps","create","GridRow","centered","columns","divided","reversed","Grid","celled","container","doubling","inverted","padded","relaxed","stackable","Column","Row","Portfolio","data","basic","allMarkdownRemark","edges","map","node","key","id","title","frontmatter","to","fields","slug","style","backgroundImage","image","childImageSharp","resolutions","src","tags","i","circular","as","query"],"mappings":"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","file":"component---src-pages-portfolio-js-bb4ec3ed977fec92eb8e.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport React from 'react';\nimport { customPropTypes, createShorthandFactory, getElementType, getUnhandledProps, SUI, useKeyOnly, useMultipleProp, useTextAlignProp, useValueAndKey, useVerticalAlignProp, useWidthProp } from '../../lib';\n/**\n * A column sub-component for Grid.\n */\n\nfunction GridColumn(props) {\n  var children = props.children,\n      className = props.className,\n      computer = props.computer,\n      color = props.color,\n      floated = props.floated,\n      largeScreen = props.largeScreen,\n      mobile = props.mobile,\n      only = props.only,\n      stretched = props.stretched,\n      tablet = props.tablet,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign,\n      widescreen = props.widescreen,\n      width = props.width;\n  var classes = cx(color, useKeyOnly(stretched, 'stretched'), useMultipleProp(only, 'only'), useTextAlignProp(textAlign), useValueAndKey(floated, 'floated'), useVerticalAlignProp(verticalAlign), useWidthProp(computer, 'wide computer'), useWidthProp(largeScreen, 'wide large screen'), useWidthProp(mobile, 'wide mobile'), useWidthProp(tablet, 'wide tablet'), useWidthProp(widescreen, 'wide widescreen'), useWidthProp(width, 'wide'), 'column', className);\n  var rest = getUnhandledProps(GridColumn, props);\n  var ElementType = getElementType(GridColumn, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGridColumn.handledProps = [\"as\", \"children\", \"className\", \"color\", \"computer\", \"floated\", \"largeScreen\", \"mobile\", \"only\", \"stretched\", \"tablet\", \"textAlign\", \"verticalAlign\", \"widescreen\", \"width\"];\nGridColumn.create = createShorthandFactory(GridColumn, function (children) {\n  return {\n    children: children\n  };\n});\nexport default GridColumn;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useMultipleProp, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\n/**\n * A row sub-component for Grid.\n */\n\nfunction GridRow(props) {\n  var centered = props.centered,\n      children = props.children,\n      className = props.className,\n      color = props.color,\n      columns = props.columns,\n      divided = props.divided,\n      only = props.only,\n      reversed = props.reversed,\n      stretched = props.stretched,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign;\n  var classes = cx(color, useKeyOnly(centered, 'centered'), useKeyOnly(divided, 'divided'), useKeyOnly(stretched, 'stretched'), useMultipleProp(only, 'only'), useMultipleProp(reversed, 'reversed'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column', true), 'row', className);\n  var rest = getUnhandledProps(GridRow, props);\n  var ElementType = getElementType(GridRow, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGridRow.handledProps = [\"as\", \"centered\", \"children\", \"className\", \"color\", \"columns\", \"divided\", \"only\", \"reversed\", \"stretched\", \"textAlign\", \"verticalAlign\"];\nexport default GridRow;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey, useMultipleProp, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\nimport GridColumn from './GridColumn';\nimport GridRow from './GridRow';\n/**\n * A grid is used to harmonize negative space in a layout.\n */\n\nfunction Grid(props) {\n  var celled = props.celled,\n      centered = props.centered,\n      children = props.children,\n      className = props.className,\n      columns = props.columns,\n      container = props.container,\n      divided = props.divided,\n      doubling = props.doubling,\n      inverted = props.inverted,\n      padded = props.padded,\n      relaxed = props.relaxed,\n      reversed = props.reversed,\n      stackable = props.stackable,\n      stretched = props.stretched,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign;\n  var classes = cx('ui', useKeyOnly(centered, 'centered'), useKeyOnly(container, 'container'), useKeyOnly(doubling, 'doubling'), useKeyOnly(inverted, 'inverted'), useKeyOnly(stackable, 'stackable'), useKeyOnly(stretched, 'stretched'), useKeyOrValueAndKey(celled, 'celled'), useKeyOrValueAndKey(divided, 'divided'), useKeyOrValueAndKey(padded, 'padded'), useKeyOrValueAndKey(relaxed, 'relaxed'), useMultipleProp(reversed, 'reversed'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column', true), 'grid', className);\n  var rest = getUnhandledProps(Grid, props);\n  var ElementType = getElementType(Grid, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGrid.handledProps = [\"as\", \"celled\", \"centered\", \"children\", \"className\", \"columns\", \"container\", \"divided\", \"doubling\", \"inverted\", \"padded\", \"relaxed\", \"reversed\", \"stackable\", \"stretched\", \"textAlign\", \"verticalAlign\"];\nGrid.Column = GridColumn;\nGrid.Row = GridRow;\nexport default Grid;","import React from 'react'\nimport Link from 'gatsby-link'\nimport ContactForm from '../components/form'\nimport { Grid, Container, Image, Header, Input, Form, Button, Segment, Label } from 'semantic-ui-react'\nimport SiteNav from '../components/site-nav'\n\nconst Portfolio = ({ data }) => (\n  <div>\n    <SiteNav></SiteNav>\n    <Segment padded basic className={\"fluid-grid portfolio\"}>\n      <Grid columns={5} className={'thumbnails-grid thumbnails-grid-port'}>\n      {data.allMarkdownRemark.edges.map(({ node }) =>\n          <Grid.Column key={node.id}>\n            <Link title={node.frontmatter.title} className={'thumbnail'} to={node.fields.slug} style={{ backgroundImage: \"url(\" + node.frontmatter.image.childImageSharp.resolutions.src + \")\" }}>\n              <div className={'text'}>\n                <h5>{node.frontmatter.title}</h5>\n                <div className={'tags'}>\n                {node.frontmatter.tags.map(i => <Label key={i} circular color={'black'}>{[i]}</Label>)}\n                </div>\n              </div>\n            </Link>\n          </Grid.Column>\n      )}\n      </Grid>\n    </Segment>\n    <div className={\"form\"}>\n      <Container>\n        <Segment padded={\"very\"} basic className={\"fluid-grid\"}>\n          <Header as={'h2'}>Like what you see?  LETS TALK.</Header>\n          <Header as={'h4'} className={\"spaced\"}>SUBMIT REQUEST</Header>\n          <ContactForm/>\n        </Segment>\n      </Container>\n    </div>\n  </div>\n)\n\nexport default Portfolio\n\n\nexport const query = graphql`\nquery portfolio {\n  allMarkdownRemark\n     {\n       edges {\n         node {\n           id\n           excerpt\n           fields {\n             slug\n           }\n           frontmatter {\n             title\n             date\n             tags\n             image {\n              childImageSharp {\n                resolutions(width: 600) {\n                  src\n                }\n              }\n            }\n           }\n         }\n       }\n     }\n  }\n`\n"],"sourceRoot":""}